/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package webcamserver;

import java.awt.image.BufferedImage;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferByte;
import java.awt.image.DataBufferInt;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.videoio.VideoWriter;

/**
 *
 * @author Wang Shuliang
 */
public class webCamServer extends javax.swing.JFrame
{

    /**
     * Creates new form webCamServer
     */
    public webCamServer()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        labelImage = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textPort = new javax.swing.JTextField();
        btn_serverOpen = new javax.swing.JButton();
        btn_record = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(966, 674));

        labelImage.setPreferredSize(new java.awt.Dimension(697, 458));

        jLabel2.setText("Server Port");

        textPort.setText("30000");
        textPort.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                textPortActionPerformed(evt);
            }
        });

        btn_serverOpen.setText("open server");
        btn_serverOpen.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_serverOpenActionPerformed(evt);
            }
        });

        btn_record.setText("record");
        btn_record.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_recordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(669, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btn_serverOpen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(51, 51, 51)
                .addComponent(btn_record)
                .addGap(59, 59, 59))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(labelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 756, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelImage, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_serverOpen)
                    .addComponent(btn_record))
                .addGap(53, 53, 53))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(213, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textPortActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_textPortActionPerformed
    {//GEN-HEADEREND:event_textPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textPortActionPerformed

    private void btn_serverOpenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_serverOpenActionPerformed
    {//GEN-HEADEREND:event_btn_serverOpenActionPerformed
        // TODO add your handling code here:
        int serverPort;
        try
        {
            serverPort = Integer.parseInt(textPort.getText());
        } catch (NumberFormatException e)
        {
            JFrame warnFrame = new JFrame("illegal port");
            JOptionPane.showMessageDialog(warnFrame, "Please enter legal port number");
            return;
        }

        if (isServerOpen)
        {
            isServerOpen = false;
            try
            {
                Thread.sleep(30);
            } catch (InterruptedException e)
            {
                e.printStackTrace();
            }

            try
            {
                myServerSocket.close();
                btn_serverOpen.setText("open server");
                mySocket = null;
            } catch (IOException ex)
            {
                Logger.getLogger(webCamServer.class.getName()).log(Level.SEVERE, null, ex);
                JFrame warnFrame = new JFrame("Server close fail");
                JOptionPane.showMessageDialog(warnFrame, "Server close fail");
            }
        } else
        {
            try
            {
                myServerSocket = new ServerSocket(serverPort);
            } catch (IOException ex)
            {
                Logger.getLogger(webCamServer.class.getName()).log(Level.SEVERE, null, ex);
                JFrame frame = new JFrame("Server open fail");
                JOptionPane.showMessageDialog(frame, "Server open fail");
                return;
            }
            isServerOpen = true;
            btn_serverOpen.setText("close server");
        }
    }//GEN-LAST:event_btn_serverOpenActionPerformed

    private void btn_recordActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_recordActionPerformed
    {//GEN-HEADEREND:event_btn_recordActionPerformed
        // TODO add your handling code here:
        if (isRecord)
        {
            isRecord = false;
            btn_record.setText("record");
            try
            {
                Thread.sleep(100);
            } catch (InterruptedException e)
            {
                e.printStackTrace();
            }
            if (videoWriter.isOpened())
            {
                videoWriter.release();
            }
        } else
        {
            isRecord = true;
            btn_record.setText("stop record");
        }
    }//GEN-LAST:event_btn_recordActionPerformed

    public Mat matify(BufferedImage sourceImg)
    {
        DataBuffer dataBuffer = sourceImg.getRaster().getDataBuffer();
        byte[] imgPixels = null;
        Mat imgMat = null;

        int width = sourceImg.getWidth();
        int height = sourceImg.getHeight();

        if (dataBuffer instanceof DataBufferByte)
        {
            imgPixels = ((DataBufferByte) dataBuffer).getData();
        }

        if (dataBuffer instanceof DataBufferInt)
        {

            int byteSize = width * height;
            imgPixels = new byte[byteSize * 3];

            int[] imgIntegerPixels = ((DataBufferInt) dataBuffer).getData();

            for (int p = 0; p < byteSize; p++)
            {
                imgPixels[p * 3 + 0] = (byte) ((imgIntegerPixels[p] & 0x00FF0000) >> 16);
                imgPixels[p * 3 + 1] = (byte) ((imgIntegerPixels[p] & 0x0000FF00) >> 8);
                imgPixels[p * 3 + 2] = (byte) (imgIntegerPixels[p] & 0x000000FF);
            }
        }

        if (imgPixels != null)
        {
            imgMat = new Mat(height, width, CvType.CV_8UC3);
            imgMat.put(0, 0, imgPixels);
        }

        return imgMat;
    }

    boolean isServerOpen = false;
    ServerSocket myServerSocket;
    Socket mySocket;
    boolean isRecord = false;
    VideoWriter videoWriter;

    static
    {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(webCamServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(webCamServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(webCamServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(webCamServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        webCamServer myServer = new webCamServer();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                myServer.setVisible(true);
                myServer.setSize(1200, 900);
            }
        });

        while (true)
        {
            if (myServer.isServerOpen)
            {
                try
                {
                    if (myServer.mySocket == null || !myServer.mySocket.isConnected())
                    {
                        myServer.mySocket = myServer.myServerSocket.accept();
                    }

                    if (!myServer.mySocket.isConnected())
                    {
                        continue;
                    }

                    DataInputStream dIn = new DataInputStream(myServer.mySocket.getInputStream());
                    int length = dIn.readInt();
                    if (length > 0)
                    {
                        byte[] message = new byte[length];
                        dIn.readFully(message, 0, message.length);
                        ByteArrayInputStream bis = new ByteArrayInputStream(message);

                        try
                        {
                            BufferedImage recvImg = ImageIO.read(bis);
                            myServer.labelImage.setIcon(new ImageIcon(recvImg));
                            myServer.labelImage.setVisible(true);

                            if (myServer.isRecord)
                            {
                                if (myServer.videoWriter == null || !myServer.videoWriter.isOpened())
                                {
                                    Size frameSize = new Size((int) recvImg.getWidth(), (int) recvImg.getHeight());
                                    String filePath = System.getProperty("user.dir");
                                    DateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");
                                    Date date = new Date();
                                    String fileName = "ServerRecordVideo_" + dateFormat.format(date) + ".avi";
                                    myServer.videoWriter = new VideoWriter(filePath + "\\" + fileName, VideoWriter.fourcc('M', 'J', 'P', 'G'), 15, frameSize, true);
                                }
                                Mat matImg = myServer.matify(recvImg);
                                myServer.videoWriter.write(matImg);
                            }

                        } catch (IOException e)
                        {
                            e.printStackTrace();
                        }
                    }

                } catch (IOException ex)
                {
                    Logger.getLogger(webCamServer.class.getName()).log(Level.SEVERE, null, ex);
                    myServer.mySocket = null;
                }
            } else
            {
                try
                {
                    Thread.sleep(30);
                } catch (InterruptedException e)
                {
                    e.printStackTrace();
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_record;
    private javax.swing.JButton btn_serverOpen;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelImage;
    private javax.swing.JTextField textPort;
    // End of variables declaration//GEN-END:variables
}
