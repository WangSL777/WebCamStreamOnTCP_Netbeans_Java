/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package webcamclient;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.videoio.VideoCapture;
import org.opencv.videoio.VideoWriter;
import org.opencv.videoio.Videoio;

/**
 *
 * @author Wang Shuliang
 */
public class webCamClient extends javax.swing.JFrame
{

    /**
     * Creates new form webCamClient
     */
    public webCamClient()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        lable_image = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        serverIpText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        serverPortText = new javax.swing.JTextField();
        btn_connectServer = new javax.swing.JButton();
        btn_openCamera = new javax.swing.JButton();
        btn_closeCamera = new javax.swing.JButton();
        btn_record = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        serverIpText.setText("127.0.0.1");
        serverIpText.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                serverIpTextActionPerformed(evt);
            }
        });

        jLabel2.setText("Server Ip");

        jLabel3.setText("Server Port");

        serverPortText.setText("30000");

        btn_connectServer.setText("connect");
        btn_connectServer.setActionCommand("Connect");
        btn_connectServer.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_connectServerActionPerformed(evt);
            }
        });

        btn_openCamera.setText("Open Camera");
        btn_openCamera.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_openCameraActionPerformed(evt);
            }
        });

        btn_closeCamera.setText("Close Camera");
        btn_closeCamera.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_closeCameraActionPerformed(evt);
            }
        });

        btn_record.setText("record");
        btn_record.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_recordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lable_image, javax.swing.GroupLayout.PREFERRED_SIZE, 697, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(547, 547, 547)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(serverIpText))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(serverPortText))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btn_connectServer, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(85, 85, 85)
                            .addComponent(btn_openCamera, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btn_closeCamera, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_record, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(446, 446, 446)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverIpText)
                    .addComponent(jLabel2)
                    .addComponent(btn_openCamera))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(serverPortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_closeCamera))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_connectServer)
                    .addComponent(btn_record))
                .addGap(30, 30, 30))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lable_image, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void serverIpTextActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_serverIpTextActionPerformed
    {//GEN-HEADEREND:event_serverIpTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serverIpTextActionPerformed

    private void btn_connectServerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_connectServerActionPerformed
    {//GEN-HEADEREND:event_btn_connectServerActionPerformed

        // TODO add your handling code here:
        serverIp = serverIpText.getText();
        serverPort = 0;
        try
        {
            serverPort = Integer.parseInt(serverPortText.getText());
        } catch (NumberFormatException e)
        {
            JFrame warnFrame = new JFrame("illegal port");
            JOptionPane.showMessageDialog(warnFrame, "Please enter legal port number");
            return;
        }

        System.out.println(String.format("Server ip: %s, port: %d", serverIp, serverPort));

        if (isConnectServer)
        {
            if (mySocket != null && mySocket.isConnected())
            {
                try
                {
                    isConnectServer = false;

                    try
                    {
                        Thread.sleep(100);
                    } catch (InterruptedException e)
                    {
                        e.printStackTrace();
                    }

                    mySocket.close();
                    btn_connectServer.setText("connect");
                } catch (IOException ex)
                {
                    Logger.getLogger(webCamClient.class.getName()).log(Level.SEVERE, null, ex);
                    JFrame warnFrame = new JFrame("Server Disconnect fail");
                    JOptionPane.showMessageDialog(warnFrame, "Server disconnect fail");
                }
            }
        } else
        {
            try
            {
                mySocket = new Socket(serverIp, serverPort);
                isConnectServer = true;
                btn_connectServer.setText("disconnect");
            } catch (IOException ex)
            {
                Logger.getLogger(webCamClient.class.getName()).log(Level.SEVERE, null, ex);
                JFrame warnFrame = new JFrame("Server connect fail");
                JOptionPane.showMessageDialog(warnFrame, "Server connect fail");
            }
        }

    }//GEN-LAST:event_btn_connectServerActionPerformed

    private void btn_openCameraActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_openCameraActionPerformed
    {//GEN-HEADEREND:event_btn_openCameraActionPerformed
        // TODO add your handling code here:
        if (!camera.isOpened())
        {
            camera.open(0);
            if (!camera.isOpened())
            {
                System.out.println("Camera Error");
            }
        }

        openCamera = true;
    }//GEN-LAST:event_btn_openCameraActionPerformed

    private void btn_closeCameraActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_closeCameraActionPerformed
    {//GEN-HEADEREND:event_btn_closeCameraActionPerformed
        // TODO add your handling code here:
        openCamera = false;
        try
        {
            Thread.sleep(100);
        } catch (InterruptedException e)
        {
            e.printStackTrace();
        }
        if (camera.isOpened())
        {
            camera.release();
        }

    }//GEN-LAST:event_btn_closeCameraActionPerformed

    private void btn_recordActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_recordActionPerformed
    {//GEN-HEADEREND:event_btn_recordActionPerformed
        // TODO add your handling code here:
        if (!camera.isOpened())
        {
            JFrame warnFrame = new JFrame("camera error");
            JOptionPane.showMessageDialog(warnFrame, "Camera should open first");
            return;
        }

        if (isRecord)
        {
            isRecord = false;
            btn_record.setText("record");
            try
            {
                Thread.sleep(100);
            } catch (InterruptedException e)
            {
                e.printStackTrace();
            }

            if (videoWriter.isOpened())
            {
                videoWriter.release();
            }
        } else
        {
            Size frameSize = new Size((int) camera.get(Videoio.CAP_PROP_FRAME_WIDTH), (int) camera.get(Videoio.CAP_PROP_FRAME_HEIGHT));
            String filePath = System.getProperty("user.dir");
            DateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");
            Date date = new Date();
            String fileName = "ClientRecordVideo_" + dateFormat.format(date) + ".avi";
            videoWriter = new VideoWriter(filePath + "\\" + fileName, VideoWriter.fourcc('M', 'J', 'P', 'G'), 15, frameSize, true);

            isRecord = true;
            btn_record.setText("stop record");
        }

    }//GEN-LAST:event_btn_recordActionPerformed

    public BufferedImage matToBufferedImage(Mat matrix)
    {

        int cols = matrix.cols();
        int rows = matrix.rows();
        int elemSize = (int) matrix.elemSize();
        byte[] data = new byte[cols * rows * elemSize];
        int type;
        matrix.get(0, 0, data);
        switch (matrix.channels())
        {
            case 1:
                type = BufferedImage.TYPE_BYTE_GRAY;
                break;
            case 3:
                type = BufferedImage.TYPE_3BYTE_BGR;
                byte b;
                for (int i = 0; i < data.length; i = i + 3)
                {
                    b = data[i];
                    data[i] = data[i + 2];
                    data[i + 2] = b;
                }
                break;
            default:
                return null;

        }
        BufferedImage image2 = new BufferedImage(cols, rows, type);
        image2.getRaster().setDataElements(0, 0, cols, rows, data);
        return image2;
    }
    
    boolean openCamera = false;
    boolean isRecord = false;
    boolean isConnectServer = false;
    VideoCapture camera;
    Mat frame;
    VideoWriter videoWriter;
    Socket mySocket;
    String serverIp;
    int serverPort;

    static
    {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(webCamClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(webCamClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(webCamClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(webCamClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        webCamClient myClient = new webCamClient();
        myClient.camera = new VideoCapture();
        myClient.frame = new Mat();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                myClient.setVisible(true);
                myClient.setSize(1200, 900);
            }
        });

        while (true)
        {
            if (myClient.openCamera)
            {
                myClient.camera.read(myClient.frame);
                Mat gray = new Mat(myClient.frame.rows(), myClient.frame.cols(), myClient.frame.type());
                BufferedImage myImage = myClient.matToBufferedImage(myClient.frame);
                myClient.lable_image.setIcon(new ImageIcon(myImage));

                //record to file
                if (myClient.isRecord && myClient.videoWriter.isOpened())
                {
                    myClient.videoWriter.write(myClient.frame);
                }

                //send to server
                if (myClient.isConnectServer == true && myClient.mySocket.isConnected())
                {
                    try
                    {
                        OutputStream myOutStream = myClient.mySocket.getOutputStream();
                        ByteArrayOutputStream bos = new ByteArrayOutputStream();
                        ImageIO.write(myImage, "jpg", bos);
                        byte[] bytes = bos.toByteArray();
                        DataOutputStream outToServer = new DataOutputStream(myOutStream);
                        outToServer.writeInt(bytes.length); // write length of the message
                        outToServer.write(bytes);           // write the message
                        myOutStream.flush();
                    } catch (IOException ex)
                    {
                        Logger.getLogger(webCamClient.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Image sent fail");
                    }
                }
            }
            try
            {
                Thread.sleep(50);
            } catch (InterruptedException e)
            {
                e.printStackTrace();
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_closeCamera;
    private javax.swing.JButton btn_connectServer;
    private javax.swing.JButton btn_openCamera;
    private javax.swing.JButton btn_record;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lable_image;
    private javax.swing.JTextField serverIpText;
    private javax.swing.JTextField serverPortText;
    // End of variables declaration//GEN-END:variables
}
